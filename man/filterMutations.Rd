% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/extractMutationSequences.R,
%   R/processMutationData.R
\name{filterMutations}
\alias{filterMutations}
\title{Extract Sequences Around Mutation Sites}
\usage{
filterMutations(data, conditions)

filterMutations(data, conditions)
}
\arguments{
\item{data}{A data frame containing mutation data, such as \code{UCS.mutations}.}

\item{conditions}{A list of conditions to filter by, where each element is named with a column name
and contains the value or range to filter on. Example: \code{list(Chromosome = "1", Variant_Type = "SNP")}.}

\item{padding}{An integer specifying the number of bases to include on each side of the mutation
position. Default is \code{1}, which extracts a trinucleotide sequence.}

\item{return.DNAStringSet}{A logical value. If \code{TRUE}, returns the sequences as a \code{DNAStringSet}
object; if \code{FALSE}, returns the sequences as a character vector in a new
column added to the input \code{data} data frame. Default is \code{FALSE}.}
}
\value{
A modified version of the input \code{data} with an additional column \code{sequences} containing
the extracted nucleotide sequences as character strings, or a \code{DNAStringSet} if
\code{return.DNAStringSet = TRUE}.

A filtered data frame that matches the specified conditions.
}
\description{
This function extracts nucleotide sequences surrounding mutation sites from the hg19 genome
based on provided genomic coordinates. By default, it extracts a trinucleotide sequence centered
around each mutation (one base on each side), but the padding size can be adjusted.

This function filters mutation data based on user-specified conditions for any columns in the dataset.
}
\details{
The function requires the \code{BSgenome.Hsapiens.UCSC.hg19} package, which provides access to the
hg19 reference genome. Chromosome names are automatically converted to UCSC format (prefixed with "chr")
if not already in this format. The function extracts sequences using the specified \code{padding} value,
centered on the mutation \code{Start_position}.
}
\examples{
\dontrun{
# Load necessary libraries
library(BSgenome.Hsapiens.UCSC.hg19)
library(GenomicRanges)


sampleDataset <- data.frame(
  Chromosome = c("1", "2", "3"),
  Start_position = c(123456, 234567, 345678)
)

# Example 1
# Extract trinucleotide sequences around each mutation site
trinucleotide_data <- extractMutationSequences(sampleDataset)
print(trinucleotide_data)

# Example 2
# Extract sequences with larger padding and return as DNAStringSet
sequences_dnastringset <- extractMutationSequences(sampleDataset, padding = 10, return.DNAStringSet = TRUE)
print(sequences_dnastringset)

# Example 3
extractMutationSequences(UCS.mutations_snp_first_100)
}

\dontrun{

# Example 1
# Filter by chromosome and variant type
filtered_data <- filterMutations(UCS.mutations, conditions = list(Chromosome = "1", Variant_Type = "SNP"))
filtered_data

# Example 2
# Filter by a specific gene symbol
filtered_data <- filterMutations(UCS.mutations, conditions = list(Hugo_Symbol = "TP53"))
}

}
